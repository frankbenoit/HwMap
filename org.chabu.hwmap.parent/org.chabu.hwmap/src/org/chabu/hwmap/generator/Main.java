/*
 * generated by Xtext 2.19.0
 */
package org.chabu.hwmap.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import org.chabu.hwmap.HwMapDslStandaloneSetup;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.Resource.Diagnostic;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

public class Main {

	public static void main(String[] args) {
		if (args.length == 0) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new HwMapDslStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args[0]);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String string) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		URI fileURI = URI.createFileURI(string);
		Path path = Paths.get(fileURI.toFileString()).toAbsolutePath();
		Resource resource = set.getResource(fileURI, true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			System.exit(1);
			return;
		}

		// Configure and start the generator
		String outDir = path.getParent().toString();
		System.out.println("Output directory: "+outDir);
		fileAccess.setOutputPath(outDir);
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.generate(resource, fileAccess, context);

		if( !resource.getErrors().isEmpty() ) {
			for( Diagnostic e : resource.getErrors() ) {
				System.err.printf("Error: %s%n", e.toString() );
			}
			System.exit(1);
			return;
		}
		System.out.println("Code generation finished.");
	}
}
