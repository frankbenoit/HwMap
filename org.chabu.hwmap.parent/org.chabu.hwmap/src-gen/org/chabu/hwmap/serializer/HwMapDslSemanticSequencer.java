/*
 * generated by Xtext 2.19.0
 */
package org.chabu.hwmap.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.chabu.hwmap.hwMapDsl.Block;
import org.chabu.hwmap.hwMapDsl.Component;
import org.chabu.hwmap.hwMapDsl.Constant;
import org.chabu.hwmap.hwMapDsl.HwMapDslPackage;
import org.chabu.hwmap.hwMapDsl.Instantiation;
import org.chabu.hwmap.hwMapDsl.MemoryMap;
import org.chabu.hwmap.hwMapDsl.Output;
import org.chabu.hwmap.hwMapDsl.Range;
import org.chabu.hwmap.hwMapDsl.Register;
import org.chabu.hwmap.hwMapDsl.RegisterBits;
import org.chabu.hwmap.services.HwMapDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HwMapDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HwMapDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HwMapDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HwMapDslPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case HwMapDslPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case HwMapDslPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case HwMapDslPackage.INSTANTIATION:
				sequence_Instantiation(context, (Instantiation) semanticObject); 
				return; 
			case HwMapDslPackage.MEMORY_MAP:
				sequence_MemoryMap(context, (MemoryMap) semanticObject); 
				return; 
			case HwMapDslPackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case HwMapDslPackage.RANGE:
				sequence_Range(context, (Range) semanticObject); 
				return; 
			case HwMapDslPackage.REGISTER:
				sequence_Register(context, (Register) semanticObject); 
				return; 
			case HwMapDslPackage.REGISTER_BITS:
				sequence_RegisterBits(context, (RegisterBits) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Block returns Block
	 *
	 * Constraint:
	 *     (name=ID size=IntegerLiteral regs+=Register*)
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (compName=ID (blocks+=Block | insts+=Instantiation)*)
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constant returns Constant
	 *
	 * Constraint:
	 *     value=IntegerLiteral
	 */
	protected void sequence_Constant(ISerializationContext context, Constant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HwMapDslPackage.Literals.CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HwMapDslPackage.Literals.CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstantAccess().getValueIntegerLiteralParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instantiation returns Instantiation
	 *
	 * Constraint:
	 *     (addr=IntegerLiteral type=ID name=ID?)
	 */
	protected void sequence_Instantiation(ISerializationContext context, Instantiation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MemoryMap returns MemoryMap
	 *
	 * Constraint:
	 *     (outputs+=Output* components+=Component)
	 */
	protected void sequence_MemoryMap(ISerializationContext context, MemoryMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     ((mode='VHDL' | mode='C') path=STRING)
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Range returns Range
	 *
	 * Constraint:
	 *     (left=IntegerLiteral right=IntegerLiteral?)
	 */
	protected void sequence_Range(ISerializationContext context, Range semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RegisterBits returns RegisterBits
	 *
	 * Constraint:
	 *     (range=Range name=ID consts+=Constant*)
	 */
	protected void sequence_RegisterBits(ISerializationContext context, RegisterBits semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Register returns Register
	 *
	 * Constraint:
	 *     (addr=IntegerLiteral name=ID consts+=Constant* bits+=RegisterBits*)
	 */
	protected void sequence_Register(ISerializationContext context, Register semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
