/**
 * generated by Xtext 2.19.0
 */
package org.chabu.hwmap.hwMapDsl.impl;

import java.util.Collection;

import org.chabu.hwmap.hwMapDsl.Block;
import org.chabu.hwmap.hwMapDsl.Component;
import org.chabu.hwmap.hwMapDsl.HwMapDslPackage;
import org.chabu.hwmap.hwMapDsl.Instantiation;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.chabu.hwmap.hwMapDsl.impl.ComponentImpl#getCompName <em>Comp Name</em>}</li>
 *   <li>{@link org.chabu.hwmap.hwMapDsl.impl.ComponentImpl#getBlocks <em>Blocks</em>}</li>
 *   <li>{@link org.chabu.hwmap.hwMapDsl.impl.ComponentImpl#getInsts <em>Insts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentImpl extends MinimalEObjectImpl.Container implements Component
{
  /**
   * The default value of the '{@link #getCompName() <em>Comp Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompName()
   * @generated
   * @ordered
   */
  protected static final String COMP_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompName() <em>Comp Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompName()
   * @generated
   * @ordered
   */
  protected String compName = COMP_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getBlocks() <em>Blocks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlocks()
   * @generated
   * @ordered
   */
  protected EList<Block> blocks;

  /**
   * The cached value of the '{@link #getInsts() <em>Insts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInsts()
   * @generated
   * @ordered
   */
  protected EList<Instantiation> insts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HwMapDslPackage.Literals.COMPONENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCompName()
  {
    return compName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompName(String newCompName)
  {
    String oldCompName = compName;
    compName = newCompName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HwMapDslPackage.COMPONENT__COMP_NAME, oldCompName, compName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Block> getBlocks()
  {
    if (blocks == null)
    {
      blocks = new EObjectContainmentEList<Block>(Block.class, this, HwMapDslPackage.COMPONENT__BLOCKS);
    }
    return blocks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Instantiation> getInsts()
  {
    if (insts == null)
    {
      insts = new EObjectContainmentEList<Instantiation>(Instantiation.class, this, HwMapDslPackage.COMPONENT__INSTS);
    }
    return insts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HwMapDslPackage.COMPONENT__BLOCKS:
        return ((InternalEList<?>)getBlocks()).basicRemove(otherEnd, msgs);
      case HwMapDslPackage.COMPONENT__INSTS:
        return ((InternalEList<?>)getInsts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HwMapDslPackage.COMPONENT__COMP_NAME:
        return getCompName();
      case HwMapDslPackage.COMPONENT__BLOCKS:
        return getBlocks();
      case HwMapDslPackage.COMPONENT__INSTS:
        return getInsts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HwMapDslPackage.COMPONENT__COMP_NAME:
        setCompName((String)newValue);
        return;
      case HwMapDslPackage.COMPONENT__BLOCKS:
        getBlocks().clear();
        getBlocks().addAll((Collection<? extends Block>)newValue);
        return;
      case HwMapDslPackage.COMPONENT__INSTS:
        getInsts().clear();
        getInsts().addAll((Collection<? extends Instantiation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HwMapDslPackage.COMPONENT__COMP_NAME:
        setCompName(COMP_NAME_EDEFAULT);
        return;
      case HwMapDslPackage.COMPONENT__BLOCKS:
        getBlocks().clear();
        return;
      case HwMapDslPackage.COMPONENT__INSTS:
        getInsts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HwMapDslPackage.COMPONENT__COMP_NAME:
        return COMP_NAME_EDEFAULT == null ? compName != null : !COMP_NAME_EDEFAULT.equals(compName);
      case HwMapDslPackage.COMPONENT__BLOCKS:
        return blocks != null && !blocks.isEmpty();
      case HwMapDslPackage.COMPONENT__INSTS:
        return insts != null && !insts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (compName: ");
    result.append(compName);
    result.append(')');
    return result.toString();
  }

} //ComponentImpl
