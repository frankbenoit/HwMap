/*
 * generated by Xtext 2.19.0
 */
package org.chabu.hwmap.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HwMapDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MemoryMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.MemoryMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemoryMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOutputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutputsOutputParserRuleCall_1_0 = (RuleCall)cOutputsAssignment_1.eContents().get(0);
		private final Assignment cComponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentsComponentParserRuleCall_2_0 = (RuleCall)cComponentsAssignment_2.eContents().get(0);
		
		//MemoryMap:
		//	{MemoryMap} outputs+=Output*
		//	components+=Component;
		@Override public ParserRule getRule() { return rule; }
		
		//{MemoryMap} outputs+=Output* components+=Component
		public Group getGroup() { return cGroup; }
		
		//{MemoryMap}
		public Action getMemoryMapAction_0() { return cMemoryMapAction_0; }
		
		//outputs+=Output*
		public Assignment getOutputsAssignment_1() { return cOutputsAssignment_1; }
		
		//Output
		public RuleCall getOutputsOutputParserRuleCall_1_0() { return cOutputsOutputParserRuleCall_1_0; }
		
		//components+=Component
		public Assignment getComponentsAssignment_2() { return cComponentsAssignment_2; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_2_0() { return cComponentsComponentParserRuleCall_2_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cModeAlternatives_2_0 = (Alternatives)cModeAssignment_2.eContents().get(0);
		private final Keyword cModeVHDLKeyword_2_0_0 = (Keyword)cModeAlternatives_2_0.eContents().get(0);
		private final Keyword cModeCKeyword_2_0_1 = (Keyword)cModeAlternatives_2_0.eContents().get(1);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		
		//Output:
		//	{Output}
		//	'Output' mode=('VHDL' | 'C') path=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Output} 'Output' mode=('VHDL' | 'C') path=STRING
		public Group getGroup() { return cGroup; }
		
		//{Output}
		public Action getOutputAction_0() { return cOutputAction_0; }
		
		//'Output'
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }
		
		//mode=('VHDL' | 'C')
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }
		
		//('VHDL' | 'C')
		public Alternatives getModeAlternatives_2_0() { return cModeAlternatives_2_0; }
		
		//'VHDL'
		public Keyword getModeVHDLKeyword_2_0_0() { return cModeVHDLKeyword_2_0_0; }
		
		//'C'
		public Keyword getModeCKeyword_2_0_1() { return cModeCKeyword_2_0_1; }
		
		//path=STRING
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_3_0() { return cPathSTRINGTerminalRuleCall_3_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComponentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCompNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompNameIDTerminalRuleCall_2_0 = (RuleCall)cCompNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cBlocksAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cBlocksBlockParserRuleCall_4_0_0 = (RuleCall)cBlocksAssignment_4_0.eContents().get(0);
		private final Assignment cInstsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cInstsInstantiationParserRuleCall_4_1_0 = (RuleCall)cInstsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Component:
		//	{Component}
		//	'Component' compName=ID '{' (blocks+=Block | insts+=Instantiation)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Component} 'Component' compName=ID '{' (blocks+=Block | insts+=Instantiation)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Component}
		public Action getComponentAction_0() { return cComponentAction_0; }
		
		//'Component'
		public Keyword getComponentKeyword_1() { return cComponentKeyword_1; }
		
		//compName=ID
		public Assignment getCompNameAssignment_2() { return cCompNameAssignment_2; }
		
		//ID
		public RuleCall getCompNameIDTerminalRuleCall_2_0() { return cCompNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(blocks+=Block | insts+=Instantiation)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//blocks+=Block
		public Assignment getBlocksAssignment_4_0() { return cBlocksAssignment_4_0; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_4_0_0() { return cBlocksBlockParserRuleCall_4_0_0; }
		
		//insts+=Instantiation
		public Assignment getInstsAssignment_4_1() { return cInstsAssignment_4_1; }
		
		//Instantiation
		public RuleCall getInstsInstantiationParserRuleCall_4_1_0() { return cInstsInstantiationParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.Instantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstantiationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAddrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddrIntegerLiteralParserRuleCall_1_0 = (RuleCall)cAddrAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Instantiation:
		//	{Instantiation} addr=IntegerLiteral type=ID name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Instantiation} addr=IntegerLiteral type=ID name=ID?
		public Group getGroup() { return cGroup; }
		
		//{Instantiation}
		public Action getInstantiationAction_0() { return cInstantiationAction_0; }
		
		//addr=IntegerLiteral
		public Assignment getAddrAssignment_1() { return cAddrAssignment_1; }
		
		//IntegerLiteral
		public RuleCall getAddrIntegerLiteralParserRuleCall_1_0() { return cAddrIntegerLiteralParserRuleCall_1_0; }
		
		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
		
		//name=ID?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBlockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeIntegerLiteralParserRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRegsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRegsRegisterParserRuleCall_5_0 = (RuleCall)cRegsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Block:
		//	{Block}
		//	'Block' name=ID size=IntegerLiteral '{'
		//	regs+=Register*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} 'Block' name=ID size=IntegerLiteral '{' regs+=Register* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'Block'
		public Keyword getBlockKeyword_1() { return cBlockKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//size=IntegerLiteral
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//IntegerLiteral
		public RuleCall getSizeIntegerLiteralParserRuleCall_3_0() { return cSizeIntegerLiteralParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//regs+=Register*
		public Assignment getRegsAssignment_5() { return cRegsAssignment_5; }
		
		//Register
		public RuleCall getRegsRegisterParserRuleCall_5_0() { return cRegsRegisterParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.Register");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddrIntegerLiteralParserRuleCall_0_0 = (RuleCall)cAddrAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConstsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstsConstantParserRuleCall_2_0 = (RuleCall)cConstsAssignment_2.eContents().get(0);
		private final Assignment cBitsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBitsRegisterBitsParserRuleCall_3_0 = (RuleCall)cBitsAssignment_3.eContents().get(0);
		
		//Register:
		//	addr=IntegerLiteral name=ID consts+=Constant* bits+=RegisterBits*;
		@Override public ParserRule getRule() { return rule; }
		
		//addr=IntegerLiteral name=ID consts+=Constant* bits+=RegisterBits*
		public Group getGroup() { return cGroup; }
		
		//addr=IntegerLiteral
		public Assignment getAddrAssignment_0() { return cAddrAssignment_0; }
		
		//IntegerLiteral
		public RuleCall getAddrIntegerLiteralParserRuleCall_0_0() { return cAddrIntegerLiteralParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//consts+=Constant*
		public Assignment getConstsAssignment_2() { return cConstsAssignment_2; }
		
		//Constant
		public RuleCall getConstsConstantParserRuleCall_2_0() { return cConstsConstantParserRuleCall_2_0; }
		
		//bits+=RegisterBits*
		public Assignment getBitsAssignment_3() { return cBitsAssignment_3; }
		
		//RegisterBits
		public RuleCall getBitsRegisterBitsParserRuleCall_3_0() { return cBitsRegisterBitsParserRuleCall_3_0; }
	}
	public class RegisterBitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.RegisterBits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRangeRangeParserRuleCall_0_0 = (RuleCall)cRangeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConstsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstsConstantParserRuleCall_2_0 = (RuleCall)cConstsAssignment_2.eContents().get(0);
		
		//RegisterBits:
		//	range=Range name=ID consts+=Constant*;
		@Override public ParserRule getRule() { return rule; }
		
		//range=Range name=ID consts+=Constant*
		public Group getGroup() { return cGroup; }
		
		//range=Range
		public Assignment getRangeAssignment_0() { return cRangeAssignment_0; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_0_0() { return cRangeRangeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//consts+=Constant*
		public Assignment getConstsAssignment_2() { return cConstsAssignment_2; }
		
		//Constant
		public RuleCall getConstsConstantParserRuleCall_2_0() { return cConstsConstantParserRuleCall_2_0; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftIntegerLiteralParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOP_2DOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightIntegerLiteralParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Range:
		//	'[' left=IntegerLiteral (OP_2DOT right=IntegerLiteral)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' left=IntegerLiteral (OP_2DOT right=IntegerLiteral)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//left=IntegerLiteral
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//IntegerLiteral
		public RuleCall getLeftIntegerLiteralParserRuleCall_1_0() { return cLeftIntegerLiteralParserRuleCall_1_0; }
		
		//(OP_2DOT right=IntegerLiteral)?
		public Group getGroup_2() { return cGroup_2; }
		
		//OP_2DOT
		public RuleCall getOP_2DOTTerminalRuleCall_2_0() { return cOP_2DOTTerminalRuleCall_2_0; }
		
		//right=IntegerLiteral
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }
		
		//IntegerLiteral
		public RuleCall getRightIntegerLiteralParserRuleCall_2_1_0() { return cRightIntegerLiteralParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIntegerLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Constant:
		//	'Constant' value=IntegerLiteral ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Constant' value=IntegerLiteral ID
		public Group getGroup() { return cGroup; }
		
		//'Constant'
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//value=IntegerLiteral
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//IntegerLiteral
		public RuleCall getValueIntegerLiteralParserRuleCall_1_0() { return cValueIntegerLiteralParserRuleCall_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINT_DECTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINT_HEXTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntegerLiteral ecore::EInt:
		//	INT_DEC | INT_HEX;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_DEC | INT_HEX
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT_DEC
		public RuleCall getINT_DECTerminalRuleCall_0() { return cINT_DECTerminalRuleCall_0; }
		
		//INT_HEX
		public RuleCall getINT_HEXTerminalRuleCall_1() { return cINT_HEXTerminalRuleCall_1; }
	}
	
	
	private final MemoryMapElements pMemoryMap;
	private final OutputElements pOutput;
	private final ComponentElements pComponent;
	private final InstantiationElements pInstantiation;
	private final BlockElements pBlock;
	private final RegisterElements pRegister;
	private final RegisterBitsElements pRegisterBits;
	private final RangeElements pRange;
	private final ConstantElements pConstant;
	private final IntegerLiteralElements pIntegerLiteral;
	private final TerminalRule tINT_DEC;
	private final TerminalRule tINT_HEX;
	private final TerminalRule tOP_2DOT;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public HwMapDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pMemoryMap = new MemoryMapElements();
		this.pOutput = new OutputElements();
		this.pComponent = new ComponentElements();
		this.pInstantiation = new InstantiationElements();
		this.pBlock = new BlockElements();
		this.pRegister = new RegisterElements();
		this.pRegisterBits = new RegisterBitsElements();
		this.pRange = new RangeElements();
		this.pConstant = new ConstantElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.tINT_DEC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.INT_DEC");
		this.tINT_HEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.INT_HEX");
		this.tOP_2DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.OP_2DOT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.chabu.hwmap.HwMapDsl.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.chabu.hwmap.HwMapDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//MemoryMap:
	//	{MemoryMap} outputs+=Output*
	//	components+=Component;
	public MemoryMapElements getMemoryMapAccess() {
		return pMemoryMap;
	}
	
	public ParserRule getMemoryMapRule() {
		return getMemoryMapAccess().getRule();
	}
	
	//Output:
	//	{Output}
	//	'Output' mode=('VHDL' | 'C') path=STRING;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Component:
	//	{Component}
	//	'Component' compName=ID '{' (blocks+=Block | insts+=Instantiation)*
	//	'}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Instantiation:
	//	{Instantiation} addr=IntegerLiteral type=ID name=ID?;
	public InstantiationElements getInstantiationAccess() {
		return pInstantiation;
	}
	
	public ParserRule getInstantiationRule() {
		return getInstantiationAccess().getRule();
	}
	
	//Block:
	//	{Block}
	//	'Block' name=ID size=IntegerLiteral '{'
	//	regs+=Register*
	//	'}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Register:
	//	addr=IntegerLiteral name=ID consts+=Constant* bits+=RegisterBits*;
	public RegisterElements getRegisterAccess() {
		return pRegister;
	}
	
	public ParserRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}
	
	//RegisterBits:
	//	range=Range name=ID consts+=Constant*;
	public RegisterBitsElements getRegisterBitsAccess() {
		return pRegisterBits;
	}
	
	public ParserRule getRegisterBitsRule() {
		return getRegisterBitsAccess().getRule();
	}
	
	//Range:
	//	'[' left=IntegerLiteral (OP_2DOT right=IntegerLiteral)? ']';
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//Constant:
	//	'Constant' value=IntegerLiteral ID;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//IntegerLiteral ecore::EInt:
	//	INT_DEC | INT_HEX;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//terminal INT_DEC:
	//	'-'? ('1'..'9' '0'..'9'*) | '0';
	public TerminalRule getINT_DECRule() {
		return tINT_DEC;
	}
	
	//terminal INT_HEX:
	//	'0x' ('a'..'f' | 'A'..'F' | '0'..'9')+;
	public TerminalRule getINT_HEXRule() {
		return tINT_HEX;
	}
	
	//terminal OP_2DOT:
	//	'..';
	public TerminalRule getOP_2DOTRule() {
		return tOP_2DOT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
