/*
 * generated by Xtext 2.19.0
 */
package org.chabu.hwmap.tests

import com.google.inject.Inject
import org.chabu.hwmap.hwMapDsl.MemoryMap
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.assertj.core.api.Assertions.*
import static org.eclipse.xtext.generator.IFileSystemAccess.*

@ExtendWith(InjectionExtension)
@InjectWith(HwMapDslInjectorProvider)
class HwMapDslGeneratorCTest {
	@Inject
	ParseHelper<MemoryMap> parseHelper
	
	@Inject
	IGenerator2 generator
	
	InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();

	
	@Test
	def void selfIncludeProtection() {
		val result = parseNoErrors('''
			Output C "out.h"
			Component CapSim 0x400 {
			}
		''')
		generateWithTextContaining( result, '''
		#ifndef OUT_H
		#define OUT_H
		''' )
	}
	
	@Test
	def void componentStruct() {
		val result = parseNoErrors('''
			Output C "out.h"
			Component CapSim 0x400 {
			}
		''')
		generateWithTextContaining( result, "struct CapSim {" )
	}
	
	@Test
	def void blockStruct() {
		val result = parseNoErrors('''
			Output C "out.h"
			Component CapSim 0x400 {
				Block Reg 0x20 {
				}
			}
		''')
		generateWithTextContaining( result, "struct CapSim_Reg {" )
	}
	
	@Test
	def void registerField() {
		val result = parseNoErrors('''
			Output C "out.h"
			Component CapSim 0x400 {
				Block Reg 0x20 {
					0x04 Control
				}
			}
		''')
		generateWithTextContaining( result, "uint32 Control;" )
	}
	
	@Test
	def void blockInstance() {
		val result = parseNoErrors('''
			Output C "out.h"
			Component CapSim 0x400 {
				Block Reg 0x20 {
					0x04 Control
				}
				0x00 Reg Registers
			}
		''')
		generateWithTextContaining( result, "struct CapSim_Reg Registers;" )
	}
	
	@Test
	def void registerConst() {
		val result = parseNoErrors('''
			Output C "out.h"
			Component CapSim 0x400 {
				Block Reg 0x20 {
					0x04 Control
						Constant 5 Start
				}
			}
		''')
		generateWithTextContaining( result, "#define CapSim_Reg_Control_CONST_Start 0x5" )
	}
	
	@Test
	def void bitsConst() {
		val result = parseNoErrors('''
			Output C "out.h"
			Component CapSim 0x400 {
				Block Reg 0x20 {
					0x04 Control
					[0] IRQ
						Constant 1 Enable
				}
			}
		''')
		generateWithTextContaining( result, "#define CapSim_Reg_Control_IRQ_CONST_Enable 0x1" )
	}
	
	@Test
	def void bitsSinglePosConst() {
		val result = parseNoErrors('''
			Output C "out.h"
			Component CapSim 0x400 {
				Block Reg 0x20 {
					0x04 Control
					[3] IRQ
				}
			}
		''')
		generateWithTextContaining( result, '''
		#define CapSim_Reg_Control_IRQ_BITPOS 3
		#define CapSim_Reg_Control_IRQ_WIDTH 1
		#define CapSim_Reg_Control_IRQ_MASK 0x8
		''' )
	}
	
	@Test
	def void bitsRangePosConst() {
		val result = parseNoErrors('''
			Output C "out.h"
			Component CapSim 0x400 {
				Block Reg 0x20 {
					0x04 Control
					[7..4] Command
				}
			}
		''')
		generateWithTextContaining( result, '''
		#define CapSim_Reg_Control_Command_BITPOS 4
		#define CapSim_Reg_Control_Command_WIDTH 4
		#define CapSim_Reg_Control_Command_MASK 0xF0
		''' )
	}
	
	def MemoryMap parseNoErrors(CharSequence text){
		val result = parseHelper.parse(text);
		assertThat(result).isNotNull();
		val errors = result.eResource.errors
		assertThat(errors)
			.^as('''Unexpected errors: «errors.join(", ")»''')
			.isEmpty()
		return result;		
	}	
	
	def generateWithTextContaining(MemoryMap result, String expectedText) {
		generator.doGenerate( result.eResource, fsa, null );
		assertNoErrors(result)
		val text = fsa.textFiles.get(DEFAULT_OUTPUT+"out.h").toString
		assertThat( text )
			.contains(expectedText)	
	}
	
	def generateWithErrorContaining(MemoryMap result, String expectedError) {
		generator.doGenerate( result.eResource, fsa, null );
		assertHasErrorContaining(result, expectedError)		
	}
	
	def assertHasErrorContaining(MemoryMap result, String text) {
		val errors = result.eResource.errors
		assertThat(errors)
			.^as('''Unexpected errors: «errors.join(", ")»''')
			.hasSize(1)
		assertThat( errors.get(0).message)
			.^as( '''Unexpected errors: «errors.join(", ")»''')
			.contains(text)
	}

	def assertNoErrors(MemoryMap result) {
		val errors = result.eResource.errors
		assertThat(errors)
		.^as('''Unexpected errors: «errors.join(", ")»''')
		.isEmpty
	}

}
