/*
 * generated by Xtext 2.19.0
 */
package org.chabu.hwmap.tests

import com.google.inject.Inject
import org.chabu.hwmap.hwMapDsl.MemoryMap
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.assertj.core.api.Assertions.*
import static org.eclipse.xtext.generator.IFileSystemAccess.*

@ExtendWith(InjectionExtension)
@InjectWith(HwMapDslInjectorProvider)
class HwMapDslGeneratorVhdlTest {
	@Inject
	ParseHelper<MemoryMap> parseHelper
	
	@Inject
	IGenerator2 generator
	
	InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();

	@Test
	def void packageDeclaration() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim {
			}
		''')
		generateWithTextContaining( result, '''
		package out is
		
		
		
		end package out;
		
		package body out is
		
		end package body out;
		''' )
	}
	
	@Test
	def void instanceSelectDecl() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim {
				Block RegDecl 0x20 {
				}
				0x40 RegDecl Reg
			}
		''')
		generateWith2TextContaining( result, '''
		IsInst_CapSim_Reg_Selected( i_addr : in std_logic_vector( 15 downto 5 ), i_cyc : in std_logic ) return std_logic;
		''', '''
		IsInst_CapSim_Reg_Selected( i_addr : in std_logic_vector( 15 downto 5 ), i_cyc : in std_logic ) return std_logic is
		''' )
	}
	
	@Test
	def void instanceSelectEval() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim {
				Block RegDecl 0x20 {
				}
				0x40 RegDecl Reg
			}
		''')
		generateWithTextContaining( result, '''return i_addr = x"0040"( 15 downto 5 ) and i_cyc = '1';''' )
	}
	
	@Test
	def void registerSelectDecl() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim {
				Block RegDecl 0x20 {
					0x04 Control
				}
			}
		''')
		generateWith2TextContaining( result, '''
		IsRegister_CapSim_RegDecl_Control_Selected( i_addr : in std_logic_vector( 4 downto 2 ), i_cyc : in std_logic ) return std_logic;
		''', '''
		IsRegister_CapSim_RegDecl_Control_Selected( i_addr : in std_logic_vector( 4 downto 2 ), i_cyc : in std_logic ) return std_logic is
		''' )
	}
	
	@Test
	def void registerSelectEval() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim {
				Block RegDecl 0x20 {
					0x04 Control
				}
			}
		''')
		generateWithTextContaining( result, '''return i_addr = x"0004"( 4 downto 2 ) and i_cyc = '1';''' )
	}
	
	@Test
	def void registerConst() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim {
				Block RegDecl 0x20 {
					0x04 Control
						Constant 0x123 C2
				}
			}
		''')
		generateWithTextContaining( result, '''constant CapSim_RegDecl_Control_CONST_C2 : integer := 16#123#''' )
	}
	
	@Test
	def void bitsConst() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim {
				Block RegDecl 0x20 {
					0x04 Control
						[7..4] Cmd
						Constant 0x123 C2
				}
			}
		''')
		generateWithTextContaining( result, '''constant CapSim_RegDecl_Control_Cmd_CONST_C2 : integer := 16#1230#''' )
	}
	
	def MemoryMap parseNoErrors(CharSequence text){
		val result = parseHelper.parse(text);
		assertThat(result).isNotNull();
		val errors = result.eResource.errors
		assertThat(errors)
			.^as('''Unexpected errors: «errors.join(", ")»''')
			.isEmpty()
		return result;		
	}	
	
	def generateWithTextContaining(MemoryMap result, String expectedText) {
		generator.doGenerate( result.eResource, fsa, null );
		assertNoErrors(result)
		val text = fsa.textFiles.get(DEFAULT_OUTPUT+"out.vhd").toString
		assertThat( text )
			.contains(expectedText)	
	}
	def generateWith2TextContaining(MemoryMap result, String expectedText, String expectedText2 ) {
		generator.doGenerate( result.eResource, fsa, null );
		assertNoErrors(result)
		val text = fsa.textFiles.get(DEFAULT_OUTPUT+"out.vhd").toString
		assertThat( text )
			.contains(expectedText)	
			.contains(expectedText2)	
	}
	
	def generateWithErrorContaining(MemoryMap result, String expectedError) {
		generator.doGenerate( result.eResource, fsa, null );
		assertHasErrorContaining(result, expectedError)		
	}
	
	def assertHasErrorContaining(MemoryMap result, String text) {
		val errors = result.eResource.errors
		assertThat(errors)
			.^as('''Unexpected errors: «errors.join(", ")»''')
			.hasSize(1)
		assertThat( errors.get(0).message)
			.^as( '''Unexpected errors: «errors.join(", ")»''')
			.contains(text)
	}

	def assertNoErrors(MemoryMap result) {
		val errors = result.eResource.errors
		assertThat(errors)
		.^as('''Unexpected errors: «errors.join(", ")»''')
		.isEmpty
	}

}
