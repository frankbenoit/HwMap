/*
 * generated by Xtext 2.19.0
 */
package org.chabu.hwmap.tests

import com.google.inject.Inject
import org.chabu.hwmap.hwMapDsl.MemoryMap
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation
import org.junit.jupiter.api.Order
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestMethodOrder
import org.junit.jupiter.api.^extension.ExtendWith

import static org.assertj.core.api.Assertions.*
import static org.eclipse.xtext.generator.IFileSystemAccess.*

@TestMethodOrder(OrderAnnotation)
@ExtendWith(InjectionExtension)
@InjectWith(HwMapDslInjectorProvider)
class HwMapDslGeneratorVhdlTest {
	@Inject
	ParseHelper<MemoryMap> parseHelper
	
	@Inject
	IGenerator2 generator
	
	InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();

	@Order(1)
	@Test
	def void packageDeclaration() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
		''')
		generateWithTextContaining( result, '''
		-- generated by HwMap : https://github.com/frankbenoit/HwMap
		library IEEE;
		use IEEE.STD_LOGIC_1164.ALL;
		
		package out_pck is
		
		end package out_pck;
		''' )
	}
	
	@Order(2)
	@Test
	def void compDeclRecord() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»type Comp_CapSim_Selection is record
		«"  "»  UnmappedSelection : std_logic;
		«"  "»end record Comp_CapSim_Selection;
		''' )
	}
	
	@Order(3)
	@Test
	def void compDecoderDecl() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
			}
		''')
		generateWithTextContaining( result, '''
		entity out_Decoder_CapSim is
		  Port (
		    addr  : in std_logic_vector( 9 downto 0 );
		    cycle : in std_logic;
		    selection : out work.out_pck.Comp_CapSim_Selection );
		end out_Decoder_CapSim;
		
		architecture Behavioral of out_Decoder_CapSim is
		  signal res : work.out_pck.Comp_CapSim_Selection;
		begin
		  selection <= res;
		  res.UnmappedSelection <= '1' when
		    cycle = '1' else '0';
		end Behavioral;
		''' )
	}
	
	@Order(3)
	@Test
	def void compDecoderImpl() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
			}
		''')
		generateWithTextContaining( result, '''
		«  »entity out_Decoder_CapSim is
		«  »  Port (
		«  »    addr  : in std_logic_vector( 9 downto 0 );
		«  »    cycle : in std_logic;
		«  »    selection : out work.out_pck.Comp_CapSim_Selection );
		«  »end out_Decoder_CapSim;
		''' )
	}
	
	@Order(10)
	@Test
	def void blockRecord() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block Registers 0x20 {
					0x008 Control
				}
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»type Block_CapSim_Registers_Selection is record
		«"  "»  UnmappedSelection : std_logic;
		«"  "»  Selected_Control : std_logic;
		«"  "»end record Block_CapSim_Registers_Selection;
		
		«"  "»type Comp_CapSim_Selection is record
		«"  "»  Block_Registers : Block_CapSim_Registers_Selection;
		«"  "»  UnmappedSelection : std_logic;
		«"  "»end record Comp_CapSim_Selection;
		''' )
	}
	
	@Order(11)
	@Test
	def void instDecl() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block Registers 0x20 {
					0x008 Control
				}
				0x100 Registers Reg1
				0x200 Registers Reg2
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»type Comp_CapSim_Selection is record
		«"  "»  Block_Registers : Block_CapSim_Registers_Selection;
		«"  "»  UnmappedSelection : std_logic;
		«"  "»  Selected_Reg1 : std_logic;
		«"  "»  Selected_Reg2 : std_logic;
		«"  "»end record Comp_CapSim_Selection;
		''' )
	}
	
	@Order(12)
	@Test
	def void registerSelectSignal() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block RegDecl 0x20 {
					0x04 Control
					0x08 Status
				}
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»  UnmappedSelection : std_logic;
		«"  "»  Selected_Control : std_logic;
		«"  "»  Selected_Status : std_logic;
		''' )
	}
	
	@Order(13)
	@Test
	def void registerSelectEval() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block RegDecl 0x20 {
					0x04 Control
					0x08 Status
				}
				0x100 RegDecl Regs
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»res.Block_RegDecl.Selected_Control <= '1' when
		«"  "»  addr( 4 downto 2 ) = "001" and
		«"  "»  cycle = '1' else '0';
		«"  "»res.Block_RegDecl.Selected_Status <= '1' when
		«"  "»  addr( 4 downto 2 ) = "010" and
		«"  "»  cycle = '1' else '0';
		''' )
	}
	
	@Order(13)
	@Test
	def void registerSelectEvalSingleRegisterInBlock() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block RegDecl 0x4 {
					0x00 Control
				}
				0x100 RegDecl Regs
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»res.Block_RegDecl.Selected_Control <= '1' when
		«"  "»  cycle = '1' else '0';
		''' )
	}
	
	@Order(14)
	@Test
	def void registerUnmappedSelectionEval() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block RegDecl 0x20 {
					0x04 Control
					0x08 Status
				}
				0x100 RegDecl Regs
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»res.Block_RegDecl.UnmappedSelection <= '1' when
		«"  "»  res.Block_RegDecl.Selected_Control = '0' and
		«"  "»  res.Block_RegDecl.Selected_Status = '0' and
		«"  "»  cycle = '1' else '0';
		''' )
	}
	
	@Order(15)
	@Test
	def void registerWithOtherName_UnmappedSelectionEval() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block BlockA 0x20 {
					0x04 Control
					0x08 Status
				}
				0x100 BlockA Regs
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»res.Block_BlockA.UnmappedSelection <= '1' when
		«"  "»  res.Block_BlockA.Selected_Control = '0' and
		«"  "»  res.Block_BlockA.Selected_Status = '0' and
		«"  "»  cycle = '1' else '0';
		''' )
	}
	
	@Order(16)
	@Test
	def void blockSelectEval() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block RegDecl 0x20 {
				}
				0x100 RegDecl Regs
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»res.Selected_Regs <= '1' when
		«"  "»  addr( 9 downto 5 ) = "01000" and
		«"  "»  cycle = '1' else '0';
		''' )
	}
	
	@Order(17)
	@Test
	def void blockWithoutNameSelectEval() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block RegDecl 0x20 {
				}
				0x100 RegDecl
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»res.Selected_RegDecl <= '1' when
		«"  "»  addr( 9 downto 5 ) = "01000" and
		«"  "»  cycle = '1' else '0';
		''' )
	}
	
	@Order(18)
	@Test
	def void blockUnmappedSelectionEval() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block RegDecl 0x20 {
				}
				0x100 RegDecl Regs
			}
		''')
		generateWithTextContaining( result, '''
		«"  "»res.UnmappedSelection <= '1' when
		«"  "»  res.Selected_Regs = '0' and
		«"  "»  cycle = '1' else '0';
		''' )
	}
	
	@Test
	def void registerConst() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block RegDecl 0x20 {
					0x04 Control
						Constant 0x123 C2
				}
			}
		''')
		generateWithTextContaining( result, '''constant CapSim_RegDecl_Control_CONST_C2 : std_logic_vector( 31 downto 0 ) := x"00000123";''' )
	}
	
	@Test
	def void bitsConst() {
		val result = parseNoErrors('''
			Output VHDL "out.vhd"
			Component CapSim 0x400 {
				Block RegDecl 0x20 {
					0x04 Control
						[7..4] Cmd
						Constant 0x123 C2
				}
			}
		''')
		generateWithTextContaining( result, '''constant CapSim_RegDecl_Control_Cmd_CONST_C2 : std_logic_vector( 31 downto 0 ) := x"00000123";''' )
	}
	
	def MemoryMap parseNoErrors(CharSequence text){
		val result = parseHelper.parse(text);
		assertThat(result).isNotNull();
		val errors = result.eResource.errors
		assertThat(errors)
			.^as('''Unexpected errors: «errors.join(", ")»''')
			.isEmpty()
		return result;		
	}	
	
	def generateWithTextContaining(MemoryMap result, String expectedText) {
		generator.doGenerate( result.eResource, fsa, null );
		assertNoErrors(result)
		val text = fsa.textFiles.get(DEFAULT_OUTPUT+"out.vhd").toString
		assertThat( text )
			.contains(expectedText)	
	}
	def generateWith2TextContaining(MemoryMap result, String expectedText, String expectedText2 ) {
		generator.doGenerate( result.eResource, fsa, null );
		assertNoErrors(result)
		val text = fsa.textFiles.get(DEFAULT_OUTPUT+"out.vhd").toString
		assertThat( text )
			.contains(expectedText)	
			.contains(expectedText2)	
	}
	
	def generateWithErrorContaining(MemoryMap result, String expectedError) {
		generator.doGenerate( result.eResource, fsa, null );
		assertHasErrorContaining(result, expectedError)		
	}
	
	def assertHasErrorContaining(MemoryMap result, String text) {
		val errors = result.eResource.errors
		assertThat(errors)
			.^as('''Unexpected errors: «errors.join(", ")»''')
			.hasSize(1)
		assertThat( errors.get(0).message)
			.^as( '''Unexpected errors: «errors.join(", ")»''')
			.contains(text)
	}

	def assertNoErrors(MemoryMap result) {
		val errors = result.eResource.errors
		assertThat(errors)
		.^as('''Unexpected errors: «errors.join(", ")»''')
		.isEmpty
	}

}
