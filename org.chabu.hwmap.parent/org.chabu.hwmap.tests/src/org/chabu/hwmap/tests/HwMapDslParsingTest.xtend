/*
 * generated by Xtext 2.19.0
 */
package org.chabu.hwmap.tests

import com.google.inject.Inject
import org.chabu.hwmap.hwMapDsl.Component
import org.chabu.hwmap.hwMapDsl.MemoryMap
import org.chabu.hwmap.hwMapDsl.Output
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.eclipse.xtext.generator.IFileSystemAccess.*

@ExtendWith(InjectionExtension)
@InjectWith(HwMapDslInjectorProvider)
class HwMapDslParsingTest {
	@Inject
	ParseHelper<MemoryMap> parseHelper
	
	@Inject
	IGenerator2 generator
	
	InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
	
	@Test
	def void exampleParsing() {
		val result = parseHelper.parse('''
			Output VHDL "../relpath/out.vhd"
			Output C    "../relpath/out.h"
			
			Component CapSim 0x400 {
				
				// Register block for the main control
				Block Regs 0x20 {
					
					// Register block for the main control
					0x00 Control
					0x04 Status
						[   0] IRQ
						[7..4] Command
						       Constant 0x0 Nothing
						       Constant 0x1 Start
						       Constant 0x2 Stop
					0x10 ModVersion
						Constant 0x12341200 Value
					
					0x18 ModVersion2
				}
				
				Block TraceMem 0x1000 {
				}
				
				0x0000 Regs
				0x1000 TraceMem TraceMem_A
				0x2000 TraceMem TraceMem_B
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		//errors.get(0).
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		val out = result.outputs.get(0) as Output
		Assertions.assertEquals("VHDL", out.mode );
		Assertions.assertEquals("../relpath/out.vhd", out.path );
		
		val comp = result.components.get(0) as Component
		Assertions.assertEquals("CapSim", comp.name );
		Assertions.assertEquals( 0x400, comp.size );

		val reg = comp.blocks.get(0)
		Assertions.assertEquals("Regs", reg.name );
		Assertions.assertEquals(0x20, reg.size );
		
		val regControl = reg.regs.get(0)
		Assertions.assertEquals("Control", regControl.name );
		Assertions.assertEquals(0x00, regControl.addr );
		
		val regStatus = reg.regs.get(1)
		Assertions.assertEquals("Status", regStatus.name );
		Assertions.assertEquals(0x04, regStatus.addr );

		val bitsStatusIrq = regStatus.bits.get(0)
		Assertions.assertEquals(0, bitsStatusIrq.range.left );
		Assertions.assertEquals(null, bitsStatusIrq.range.right );
		
		val bitsStatusCommand = regStatus.bits.get(1)
		Assertions.assertEquals(7, bitsStatusCommand.range.left );
		Assertions.assertEquals(4, bitsStatusCommand.range.right );

		Assertions.assertEquals("Nothing", bitsStatusCommand.consts.get(0).name );
		Assertions.assertEquals(0, bitsStatusCommand.consts.get(0).value );
		
		Assertions.assertEquals("Start", bitsStatusCommand.consts.get(1).name );
		Assertions.assertEquals(1, bitsStatusCommand.consts.get(1).value );
				
		val regModVersion = reg.regs.get(2)
		Assertions.assertEquals("ModVersion", regModVersion.name );
		Assertions.assertEquals(0x10, regModVersion.addr );
		Assertions.assertEquals("Value", regModVersion.consts.get(0).name );
		Assertions.assertEquals(0x12341200, regModVersion.consts.get(0).value );
		
		val instReg = comp.insts.get(0);
		Assertions.assertEquals(0x0000, instReg.addr );
		Assertions.assertEquals("Regs", instReg.type.name );
		Assertions.assertEquals(null, instReg.name );
		
		val instMem = comp.insts.get(1);
		Assertions.assertEquals(0x1000, instMem.addr );
		Assertions.assertEquals("TraceMem", instMem.type.name );
		Assertions.assertEquals("TraceMem_A", instMem.name );
		
		generator.doGenerate( result.eResource, fsa, null );
		
		Assertions.assertEquals( 2, fsa.getTextFiles.size )
		Assertions.assertTrue(fsa.textFiles.containsKey(DEFAULT_OUTPUT+"../relpath/out.h"))
		Assertions.assertTrue(fsa.textFiles.containsKey(DEFAULT_OUTPUT+"../relpath/out.vhd"))
		
	}

}
