/*
 * generated by Xtext 2.19.0
 */
package org.chabu.hwmap.tests

import com.google.inject.Inject
import org.chabu.hwmap.hwMapDsl.MemoryMap
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.chabu.hwmap.hwMapDsl.Component

@ExtendWith(InjectionExtension)
@InjectWith(HwMapDslInjectorProvider)
class HwMapDslParsingTest {
	@Inject
	ParseHelper<MemoryMap> parseHelper
	
	@Test
	def void exampleParsing() {
		val result = parseHelper.parse('''
			Output VHDL "../relpath"
			Output C    "../relpath"
			
			Component CapSim {
				
				// Register block for the main control
				Block Regs 0x20 {
					
					// Register block for the main control
					0x00 Control
					0x04 Status
						[   0] IRQ
						[7..4] Command
						       Constant 0x0 Nothing
						       Constant 0x1 Start
						       Constant 0x2 Stop
					0x08 ModVersion
						Constant 0x12341200 Value
					
					0x0A ModVersion
				}
				
				Block TraceMem 0x1000 {
				}
				
				0x0000 Regs
				0x1000 TraceMem TraceMem_A
				0x2000 TraceMem TraceMem_B
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		//errors.get(0).
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void parseComponent() {
		val result = parseHelper.parse('''
			Component CapSim {
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val comp = result.components.get(0) as Component
		Assertions.assertEquals("CapSim", comp.compName );
		
	}

}
